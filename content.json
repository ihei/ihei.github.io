{"meta":{"title":"ihei","subtitle":"ihei-blog","description":"加油加油，认真度过研究生生活--","author":"ihei","url":"ihey.xyz","root":"/"},"pages":[{"title":"tags","date":"2019-04-20T17:09:48.000Z","updated":"2019-04-20T17:10:04.985Z","comments":true,"path":"tags/index.html","permalink":"ihey.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"01线程thread","slug":"01线程thread","date":"2019-04-20T11:36:39.172Z","updated":"2019-04-20T17:33:30.855Z","comments":true,"path":"2019/04/20/01线程thread/","link":"","permalink":"ihey.xyz/2019/04/20/01线程thread/","excerpt":"","text":"参考https://zh.cppreference.com/w/cpp/thread C++线程支持库包含线程、互斥、条件变量和期货的内建支持。 类：thread管理分离的线程 1234567891011121314151617181920212223242526class thread &#123; public: // 类型： class id; typedef /*implementation-defined*/ native_handle_type; // 构造/复制/销毁： thread() noexcept; template &lt;class F, class ...Args&gt; explicit thread(F&amp;&amp; f, Args&amp;&amp;... args); ~thread(); thread(const thread&amp;) = delete; thread(thread&amp;&amp;) noexcept; thread&amp; operator=(const thread&amp;) = delete; thread&amp; operator=(thread&amp;&amp;) noexcept; // 成员： void swap(thread&amp;) noexcept; bool joinable() const noexcept; void join(); void detach(); id get_id() const noexcept; native_handle_type native_handle(); // 静态成员： static unsigned hardware_concurrency() noexcept;&#125;; 函数成员函数构造函数构造新的 thread 对象。 构造不表示线程的新 thread 对象。 移动构造函数。构造表示曾为 other 所表示的执行线程的 thread 对象。此调用后 other 不再表示执行线程。 构造新的 std::thread 对象并将它与执行线程关联。新的执行线程开始执行 12std::invoke(decay_copy(std::forward&lt;Function&gt;(f)), decay_copy(std::forward&lt;Args&gt;(args))...); 示例 12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;#include &lt;utility&gt;#include &lt;thread&gt;#include &lt;chrono&gt; void f1(int n)&#123; for (int i = 0; i &lt; 5; ++i) &#123; std::cout &lt;&lt; \"Thread 1 executing\\n\"; ++n; std::this_thread::sleep_for(std::chrono::milliseconds(10)); &#125;&#125; void f2(int&amp; n)&#123; for (int i = 0; i &lt; 5; ++i) &#123; std::cout &lt;&lt; \"Thread 2 executing\\n\"; ++n; std::this_thread::sleep_for(std::chrono::milliseconds(10)); &#125;&#125; int main()&#123; int n = 0; std::thread t1; // t1 非线程 std::thread t2(f1, n + 1); // 按值传递 std::thread t3(f2, std::ref(n)); // 按引用传递 std::thread t4(std::move(t3)); // t4 现在运行 f2() 。 t3 不再是线程 t2.join(); t4.join(); std::cout &lt;&lt; \"Final value of n is \" &lt;&lt; n &lt;&lt; '\\n';&#125; 输出 1234567891011Thread 1 executingThread 2 executingThread 1 executingThread 2 executingThread 1 executingThread 2 executingThread 1 executingThread 2 executingThread 2 executingThread 1 executingFinal value of n is 5 析构函数~thread();销毁 thread 对象。 若 *this 拥有关联线程（ joinable() == true ），则调用 std::terminate() 。 注意在下列操作后 thread 对象无关联的线程（从而可安全销毁） 被默认构造 被移动 已调用 join() 已调用 detach() std::thread::operator=1thread&amp; operator=( thread&amp;&amp; other ) noexcept; 若 *this 仍拥有关联的运行中进程（即 joinable() == true ），则调用 std::terminate() 。否则，赋值 other 的状态给 *this 并设置 other 为默认构造的状态。 此调用后， this-&gt;get_id() 等于 other.get_id() 在调用前的值，而 other 不在表示执行的线程。 观察器joinable检查线程是否可合并，即潜在地运行于平行环境中 (公开成员函数) 检查 thread 对象是否标识活跃的执行线程。具体是返回 true if get_id() != std::thread::id 。故默认构造的 thread 不可合并。 完成执行代码，但未被合并的线程仍被认为是活跃线程，从而可合并。 示例 1234567891011121314151617181920212223#include &lt;iostream&gt;#include &lt;thread&gt;#include &lt;chrono&gt; void foo()&#123; std::this_thread::sleep_for(std::chrono::seconds(1));&#125; int main()&#123; std::thread t; std::cout &lt;&lt; \"before starting, joinable: \" &lt;&lt; std::boolalpha &lt;&lt; t.joinable() &lt;&lt; '\\n'; t = std::thread(foo); std::cout &lt;&lt; \"after starting, joinable: \" &lt;&lt; t.joinable() &lt;&lt; '\\n'; t.join(); std::cout &lt;&lt; \"after joining, joinable: \" &lt;&lt; t.joinable() &lt;&lt; '\\n';&#125; 输出 123before starting, joinable: falseafter starting, joinable: trueafter joining, joinable: false get_id返回线程的 id (公开成员函数) 1std::thread::id get_id() const noexcept; 返回标识与 *this 关联的线程的std::thread::id类型值。 1234567891011121314151617181920212223 #include &lt;iostream&gt;#include &lt;thread&gt;#include &lt;chrono&gt; void foo()&#123; std::this_thread::sleep_for(std::chrono::seconds(1));&#125; int main()&#123; std::thread t1(foo); std::thread::id t1_id = t1.get_id(); std::thread t2(foo); std::thread::id t2_id = t2.get_id(); std::cout &lt;&lt; \"t1's id: \" &lt;&lt; t1_id &lt;&lt; '\\n'; std::cout &lt;&lt; \"t2's id: \" &lt;&lt; t2_id &lt;&lt; '\\n'; t1.join(); t2.join();&#125; 输出 12t1&apos;s id: 0x35a7210ft2&apos;s id: 0x35a311c4 native_handle1native_handle_type native_handle(); 返回底层实现定义的线程句柄 (公开成员函数) 示例 123456789101112131415161718192021222324252627282930313233#include &lt;thread&gt;#include &lt;mutex&gt;#include &lt;iostream&gt;#include &lt;chrono&gt;#include &lt;cstring&gt;#include &lt;pthread.h&gt; std::mutex iomutex;void f(int num)&#123; std::this_thread::sleep_for(std::chrono::seconds(1)); sched_param sch; int policy; pthread_getschedparam(pthread_self(), &amp;policy, &amp;sch); std::lock_guard&lt;std::mutex&gt; lk(iomutex); std::cout &lt;&lt; \"Thread \" &lt;&lt; num &lt;&lt; \" is executing at priority \" &lt;&lt; sch.sched_priority &lt;&lt; '\\n';&#125; int main()&#123; std::thread t1(f, 1), t2(f, 2); sched_param sch; int policy; pthread_getschedparam(t1.native_handle(), &amp;policy, &amp;sch); sch.sched_priority = 20; if (pthread_setschedparam(t1.native_handle(), SCHED_FIFO, &amp;sch)) &#123; std::cout &lt;&lt; \"Failed to setschedparam: \" &lt;&lt; std::strerror(errno) &lt;&lt; '\\n'; &#125; t1.join(); t2.join();&#125; 输出 12Thread 2 is executing at priority 0Thread 1 is executing at priority 20 hardware_concurrency1static unsigned int hardware_concurrency() noexcept; 返回实现所支持的并发线程数。应该只把值当做提示。(静态) 示例 1234567#include &lt;iostream&gt;#include &lt;thread&gt; int main() &#123; unsigned int n = std::thread::hardware_concurrency(); std::cout &lt;&lt; n &lt;&lt; \" concurrent threads are supported.\\n\";&#125; 输出 14 concurrent threads are supported. 操作join阻塞当前线程，直至*this所标识的线程完成其执行。*this 所标识的线程的完成同步于从 join()的成功返回。 错误条件 若 this-&gt;get_id() == std::this_thread::get_id() （检测到死锁）则为 resource_deadlock_would_occur 若线程非法则为 no_such_process 若 joinable 为 false 则为 invalid_argument 示例 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;#include &lt;thread&gt;#include &lt;chrono&gt; void foo()&#123; // 模拟昂贵操作 std::this_thread::sleep_for(std::chrono::seconds(1));&#125; void bar()&#123; // 模拟昂贵操作 std::this_thread::sleep_for(std::chrono::seconds(1));&#125; int main()&#123; std::cout &lt;&lt; \"starting first helper...\\n\"; std::thread helper1(foo); std::cout &lt;&lt; \"starting second helper...\\n\"; std::thread helper2(bar); std::cout &lt;&lt; \"waiting for helpers to finish...\" &lt;&lt; std::endl; helper1.join(); helper2.join(); std::cout &lt;&lt; \"done!\\n\";&#125; 输出 1234starting first helper...starting second helper...waiting for helpers to finish...done! detach1void detach(); 从 thread 对象分离执行的线程，允许执行独立地持续。一旦线程退出，则释放所有分配的资源。 调用 detach 后， *this 不再占有任何线程。 注意 若 joinable() == false 或错误发生时为 std::system_error 。 示例 12345678910111213141516171819202122232425#include &lt;iostream&gt;#include &lt;chrono&gt;#include &lt;thread&gt; void independentThread() &#123; std::cout &lt;&lt; \"Starting concurrent thread.\\n\"; std::this_thread::sleep_for(std::chrono::seconds(2)); std::cout &lt;&lt; \"Exiting concurrent thread.\\n\";&#125; void threadCaller() &#123; std::cout &lt;&lt; \"Starting thread caller.\\n\"; std::thread t(independentThread); t.detach(); std::this_thread::sleep_for(std::chrono::seconds(1)); std::cout &lt;&lt; \"Exiting thread caller.\\n\";&#125; int main() &#123; threadCaller(); std::this_thread::sleep_for(std::chrono::seconds(5));&#125; 输出 1234Starting thread caller.Starting concurrent thread.Exiting thread caller.Exiting concurrent thread. swap1void swap( thread&amp; other ) noexcept; 互换二个 thread 对象的底层句柄。 其他头文件中的函数std::swap(std::thread)void swap( thread &amp;lhs, thread &amp;rhs ) noexcept; 特化std::swap算法。交换 lhs 与 rhs 的状态。等效地调用 lhs.swap(rhs) 。 比较两个thread::id对象123456bool operator==( thread::id lhs, thread::id rhs ) noexcept;bool operator!=( thread::id lhs, thread::id rhs ) noexcept;bool operator&lt;( thread::id lhs, thread::id rhs ) noexcept;bool operator&lt;=( thread::id lhs, thread::id rhs ) noexcept;bool operator&gt;( thread::id lhs, thread::id rhs ) noexcept;bool operator&gt;=( thread::id lhs, thread::id rhs ) noexcept; std::hash\\std::thread::id\\std::hash 对 std::thread::id 类的模板特化允许用户获得线程标识符的哈希。 定义于命名空间 std::this_thread yield提供提示给实现，以重调度线程的执行，允许其他线程运行。 此函数的准确性为依赖于实现，特别是使用中的 OS 调度器机制和系统状态。例如，先进先出实时调度器（ Linux 的 SCHED_FIFO ）将悬挂当前线程并将它放到准备运行的同优先级线程的队列尾（而若无其他线程在同优先级，则 yield 无效果）。 1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include &lt;chrono&gt;#include &lt;thread&gt; // 建议其他线程运行一小段时间的“忙睡眠”void little_sleep(std::chrono::microseconds us)&#123; auto start = std::chrono::high_resolution_clock::now(); auto end = start + us; do &#123; std::this_thread::yield(); &#125; while (std::chrono::high_resolution_clock::now() &lt; end);&#125; int main()&#123; auto start = std::chrono::high_resolution_clock::now(); little_sleep(std::chrono::microseconds(100)); auto elapsed = std::chrono::high_resolution_clock::now() - start; std::cout &lt;&lt; \"waited for \" &lt;&lt; std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(elapsed).count() &lt;&lt; \" microseconds\\n\";&#125;//输出：waited for 128 microseconds sleep_for12template&lt; class Rep, class Period &gt;void sleep_for( const std::chrono::duration&lt;Rep, Period&gt;&amp; sleep_duration ); 使线程休眠一段时间，阻塞当前线程执行，至少经过指定的 sleep_duration 。此函数可能阻塞长于 sleep_duration ，因为调度或资源争议延迟。标准库建议用稳定时钟度量时长。若实现用系统时间代替，则等待时间亦可能对时钟调节敏感。 12345678910111213141516171819#include &lt;iostream&gt;#include &lt;chrono&gt;#include &lt;thread&gt; int main()&#123; using namespace std::chrono_literals; // C++14 std::cout &lt;&lt; \"Hello waiter\" &lt;&lt; std::endl; // 有意冲入 auto start = std::chrono::high_resolution_clock::now(); std::this_thread::sleep_for(2s); auto end = std::chrono::high_resolution_clock::now(); std::chrono::duration&lt;double, std::milli&gt; elapsed = end-start; std::cout &lt;&lt; \"Waited \" &lt;&lt; elapsed.count() &lt;&lt; \" ms\\n\";&#125;/*输出Hello waiterWaited 2000.12 ms*/ sleep_until12template&lt; class Clock, class Duration &gt;void sleep_until( const std::chrono::time_point&lt;Clock,Duration&gt;&amp; sleep_time ); 暂停当前线程的执行直到特定的时间点，阻塞当前线程，直至抵达指定的 sleep_time 。使用联倾向于 sleep_time 的时钟，这表示时钟调节有影响。从而在调用时间点后，阻塞的时长可能小于，但不会多于 sleep_time - Clock::now() 。函数亦可能阻塞长于抵达 sleep_time 之后，由于调度或资源争议延迟。 命名空间this_thread 提供访问当前执行线程的函数 12345678910111213141516171819202122232425262728293031namespace std &#123; class thread; void swap(thread&amp; x, thread&amp; y) noexcept; bool operator==(thread::id x, thread::id y) noexcept; bool operator!=(thread::id x, thread::id y) noexcept; bool operator&lt;(thread::id x, thread::id y) noexcept; bool operator&lt;=(thread::id x, thread::id y) noexcept; bool operator&gt;(thread::id x, thread::id y) noexcept; bool operator&gt;=(thread::id x, thread::id y) noexcept; template&lt;class CharT, class Traits&gt; basic_ostream&lt;CharT, Traits&gt;&amp; operator&lt;&lt;(basic_ostream&lt;CharT, Traits&gt;&amp; out, thread::id id); template &lt;class T&gt; struct hash; template &lt;&gt; struct hash&lt;thread::id&gt;; namespace this_thread &#123; thread::id get_id() noexcept; void yield() noexcept; template &lt;class Clock, class Duration&gt; void sleep_until(const chrono::time_point&lt;Clock, Duration&gt;&amp; abs_time); template &lt;class Rep, class Period&gt; void sleep_for(const chrono::duration&lt;Rep, Period&gt;&amp; rel_time); &#125;&#125;","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"ihey.xyz//source/tags/面试/"},{"name":"c&cpp","slug":"c-cpp","permalink":"ihey.xyz//source/tags/c-cpp/"},{"name":"多线程","slug":"多线程","permalink":"ihey.xyz//source/tags/多线程/"}]},{"title":"volatile是做什么的","slug":"volatile是做什么的","date":"2019-04-20T10:02:51.567Z","updated":"2019-04-20T17:14:11.767Z","comments":true,"path":"2019/04/20/volatile是做什么的/","link":"","permalink":"ihey.xyz/2019/04/20/volatile是做什么的/","excerpt":"","text":"转载自https://liam.page/2018/01/18/volatile-in-C-and-Cpp/ 约定Volatile 这个话题，涉及到计算机科学多个领域多个层次的诸多细节。仅靠一篇博客，很难穷尽这些细节。因此，若不对讨论范围做一些约定，很容易就有诸多漏洞。到时误人子弟，就不好了。以下是一些基本的约定： 这篇博文讨论的 volatile 关键字，是 C 和 C++ 语言中的关键字。Java 等语言中，也有 volatile 关键字。但它们和 C/C++ 里的 volatile 不完全相同，不在这篇博文的讨论范围内。 这篇博文讨论的 volatile 关键字，是限定在 C/C++ 标准之下的。这也就是说，我们讨论的内容应该是与平台无关的，同时也是与编译器扩展无关的。 相应的，这篇文章讨论的「标准」指的是 C/C++ 的标准，而不是其他什么东西。 我们希望编写的代码是 (1) 符合标准的，(2) 性能良好的，(3) 可移植的。这里 (1) 保证了代码执行结果的正确性，(2) 保证了高效性，(3) 体现了平台无关性（以及编译器扩展等的无关性）。 含义单词 volatile 的含义在谈及 C/C++ 中的 volatile 关键字时，总有人会拿 volatile 这个英文单词的中文解释说事。他们把 volatile 翻译作「易变的」。但事实上，对于翻译来说，很多时候目标语言很难找到一个词能够反映源语言中单词的全部含义和细节。此处「易变的」就无法做到这一点。 Volatile 的意思，若要详细理解，在柯林斯高阶学习词典中，volatile 是这样解释的： A situation that is volatile is likely to change suddenly and unexpectedly. 这里对 volatile 的解释有三个精髓的形容词和副词，体现了 volatile 的含义。 likely：可能的。这意味着被 volatile 形容的对象「有可能也有可能不」发生改变，因此我们不能对这样的对象的状态做出任何假设。 suddenly：突然地。这意味着被 volatile 形容的对象可能发生瞬时改变。 unexpectedly：不可预期地。这与 likely 相互呼应，意味着被 volatile 形容的对象可能以各种不可预期的方式和时间发生更改。 因此，volatile 其实就是告诉我们，被它修饰的对象出现任何情况都不要奇怪，我们不能对它们做任何假设。 程序中 volatile 的含义对于程序员来说，程序本身的任何行为都必须是可预期的。那么，在程序当中，什么才叫 volatile 呢？这个问题的答案也很简单：程序可能受到程序之外的因素影响。 考虑以下 C/C++ 代码。 1234volatile int *p = /* ... */;int a, b;a = *p;b = *p; 若忽略 volatile，那么 p 就只是一个「指向 int 类型的指针」。这样一来，a = *p; 和 b = *p; 两句，就只需要从内存中读取一次就够了。因为从内存中读取一次之后，CPU 的寄存器中就已经有了这个值；把这个值直接复用就可以了。这样一来，编译器就会做优化，把两次访存的操作优化成一次。这样做是基于一个假设：我们在代码里没有改变 p 指向内存地址的值，那么这个值就一定不会发生改变。 此处说的「读取内存」，包括了读取 CPU 缓存和读取计算机主存。 然而，由于 MMIP（Memory mapped I/O）的存在，这个假设不一定是真的。例如说，假设 p 指向的内存是一个硬件设备。这样一来，从 p 指向的内存读取数据可能伴随着可观测的副作用：硬件状态的修改。此时，代码的原意可能是将硬件设备返回的连续两个 int 分别保存在 a 和 b 当中。这种情况下，编译器的优化就会导致程序行为不符合预期了。 总结来说，被 volatile 修饰的变量，在对其进行读写操作时，会引发一些可观测的副作用。而这些可观测的副作用，是由程序之外的因素决定的。 关键字 volatile 的含义CPP reference 网站是对 C 和 C++ 语言标准的整理。因此，绝大多数时候，我们可以通过这个网站对语言标准进行查询。关于 volatile 关键字，有 C 语言标准和 C++ 语言标准可查。这里摘录两份标准对 volatile 访问的描述。 C 语言：Every access (both read and write) made through an lvalue expression of volatile-qualified type is considered an observable side effect for the purpose of optimization and is evaluated strictly according to the rules of the abstract machine (that is, all writes are completed at some time before the next sequence point). This means that within a single thread of execution, a volatile access cannot be optimized out or reordered relative to another visible side effect that is separated by a sequence point from the volatile access.C++ 语言：Every access (read or write operation, member function call, etc.) made through a glvalue expression of volatile-qualified type is treated as a visible side-effect for the purposes of optimization (that is, within a single thread of execution, volatile accesses cannot be optimized out or reordered with another visible side effect that is sequenced-before or sequenced-after the volatile access. This makes volatile objects suitable for communication with a signal handler, but not with another thread of execution, see std::memory_order). Any attempt to refer to a volatile object through a non-volatile glvalue (e.g. through a reference or pointer to non-volatile type) results in undefined behavior. 这里首先解释两组概念：值类型和序列点（执行序列）。 值类型指的是左值（lvalue）右值（rvalue）这些概念。关于左值和右值，前作有过介绍。简单的理解，左值可以出现在赋值等号的左边，使用时取的是作为对象的身份；右值不可以出现在赋值等号的左边，使用时取的是对象的值。除了 lvalue 和 rvalue，C++ 还定义了其他的值类型。其中，xvalue 大体可以理解为返回右值引用的函数调用或表达式，而 glvalue 则是 lvalue 和 xvalue 之和。 序列点则是 C/C++ 中讨论执行顺序时会提到的概念。对于 C/C++ 的表达式来说，执行表达式有两种类型的动作：(1) 计算某个值、(2) 副作用（例如访问 volatile 对象，原子同步，修改文件等）。因此，如果在两个表达式 E1 和 E2 中间有一个序列点，或者在 C++ 中 E1 于序列中在 E2 之前，则 E1 的求值动作和副作用都会在 E2 的求值动作和副作用之前。关于序列点和序列顺序规则，可以参考：这里和这里。 因此我们讲，在 C/C++ 中，对 volatile 对象的访问，有编译器优化上的副作用： 不允许被优化消失（optimized out）； 于序列上在另一个对 volatile 对象的访问之前。 这里提及的「不允许被优化」表示对 volatile 变量的访问，编译器不能做任何假设和推理，都必须按部就班地与「内存」进行交互。因此，上述例中「复用寄存器中的值」就是不允许的。 需要注意的是，无论是 C 还是 C++ 的标准，对于 volatile 访问的序列性，都有单线程执行的前提。其中 C++ 标准特别提及，这个顺序性在多线程环境里不一定成立。 volatile 与多线程volatile 可以解决多线程中的某些问题，这一错误认识荼毒多年。例如，在知乎「volatile」话题下的介绍就是「多线程开发中保持可见性的关键字」。为了拨乱反正，这里先给出结论（注意这些结论都基于本文第一节提出的约定之上）： volatile 不能解决多线程中的问题。 按照Hans Boehm &amp; Nick Maclaren 的总结，volatile只在三种场合下是合适的。 和信号处理（signal handler）相关的场合； 和内存映射硬件（memory mapped hardware）相关的场合； 和非本地跳转（setjmp 和 longjmp）相关的场合。 以下我们尝试来用 volatile 关键字解决多线程同步的一个基本问题：happens-before。 naïve case首先我们考虑这样一段（伪）代码。 123456789101112131415161718192021222324// global shared databool flag = false;thread1() &#123; flag = false; Type* value = new Type(/* parameters */); thread2(value); while (true) &#123; if (flag == true) &#123; apply(value); break; &#125; &#125; thread2.join(); if (nullptr != value) &#123; delete value; &#125; return;&#125;thread2(Type* value) &#123; // do some evaluations value-&gt;update(/* parameters */); flag = true; return;&#125; c++这段代码将 thread1 作为主线程，等待 thread2 准备好 value。因此，thread2 在更新 value 之后将 flag置为真，而 thread1 死循环地检测 flag。简单来说，这段代码的意图希望实现 thread2 在 thread1 使用 value 之前执行完毕这样的语义。 对多线程编程稍有了解的人应该知道，这段代码是有问题的。问题主要出在两个方面。其一，在 thread1 中，flag = false 赋值之后，在 while 死循环里，没有任何机会修改 flag 的值，因此在运行之前，编译器优化可能会将 if (flag == true) 的内容全部优化掉。其二，在 thread2 中，尽管逻辑上 update 需要发生在 flag = true之前，但编译器和 CPU 并不知道；因此编译器优化和 CPU 乱序执行可能会使 flag = true 发生在 update 完成之前，因此 thread1 执行 apply(value) 时可能 value 还未准备好。 加一个 volatile 试试？在错误的理解中，此时就到了 volatile 登场的时候了。 首先我们考虑这样一段（伪）代码。 123456789101112131415161718192021222324// global shared datavolatile bool flag = false; // 1.thread1() &#123; flag = false; Type* value = new Type(/* parameters */); thread2(value); while (true) &#123; if (flag == true) &#123; // 2. apply(value); break; &#125; &#125; thread2.join(); if (nullptr != value) &#123; delete value; &#125; return;&#125;thread2(Type* value) &#123; // do some evaluations value-&gt;update(/* parameters */); flag = true; return;&#125; 这里，在 (1) 处，我们将 flag 声明为 volatile-qualified。因此，在 (2) 处，由于 flag == true 是对 volatile 变量的访问，故而 if-block 不会被优化消失。然而，尽管 flag 是 volatile-qualified，但 value并不是。因此，编译器仍有可能在优化时将 thread2 中的 update 和对 flag 的赋值交换顺序。此外，由于 volatile 禁止了编译器对 flag 的优化，这样使用 volatile 不仅无法达成目的，反而会导致性能下降。 再加一个 volatile 呢？在错误的理解中，可能会对 value 也加以 volatile 关键字修饰；颇有些「没有什么是一个 volatile 解决不了的；如果不行，那就两个」的意思。 123456789101112131415161718192021222324// global shared datavolatile bool flag = false;thread1() &#123; flag = false; volatile Type* value = new Type(/* parameters */); // 1. thread2(value); while (true) &#123; if (flag == true) &#123; apply(value); break; &#125; &#125; thread2.join(); if (nullptr != value) &#123; delete value; &#125; return;&#125;thread2(volatile Type* value) &#123; // do some evaluations value-&gt;update(/* parameters */); // 2. flag = true; return;&#125; 在上一节代码的基础上，(1) 将 value 声明为 volatile-qualified。因此 (2) 处对两个 volatile-qualified 变量进行访问时，编译器不会交换他们的顺序。看起来就万事大吉了。 然而，volatile 只作用在编译器上，但我们的代码最终是要运行在 CPU 上的。尽管编译器不会将 (2) 处换序，但 CPU 的乱序执行（out-of-order execution）已是几十年的老技术了；在 CPU 执行时，value 和 flag 的赋值仍有可能是被换序了的（store-store）。 也许有人会说，x86 和 AMD64 架构的 CPU（大多数个人机器和服务器使用这两种架构的 CPU）只允许 sotre-load 乱序，而不会发生 store-store 乱序；或者在诸如 IA64 架构的处理器上，对 volatile-qualified 变量的访问采用了专门的指令。因而，在这些条件下，这段代码是安全的。尽管如此，使用 volatile 会禁止编译器优化相关变量，从而降低性能，所以也不建议依赖 volatile 在这种情况下做线程同步。另一方面，这严重依赖具体的硬件规范，超出了本文的约定讨论范围。 到底应该怎样做？回顾一下，我们最初遇到的问题其实需要解决两件事情。一是 flag 相关的代码块不能被轻易优化消失，二是要保证线程同步的 happens-before 语义。但本质上，设计使用 flag 本身也就是为了构建 happens-before 语义。这也就是说，两个问题，后者才是核心；如有其他不用 flag 的办法解决问题，那么 flag 就不重要。 对于当前问题，最简单的办法是使用原子操作。 123456789101112131415161718192021222324// global shared datastd::atomic&lt;bool&gt; flag = false; // #include &lt;atomic&gt;thread1() &#123; flag = false; Type* value = new Type(/* parameters */); thread2(value); while (true) &#123; if (flag == true) &#123; apply(value); break; &#125; &#125; thread2.join(); if (nullptr != value) &#123; delete value; &#125; return;&#125;thread2(Type* value) &#123; // do some evaluations value-&gt;update(/* parameters */); flag = true; return;&#125; 由于对 std::atomic&lt;bool&gt; 的操作是原子的，同时构建了良好的内存屏障，因此整个代码的行为在标准下是良定义的。 除此之外，还可以结合使用互斥量和条件变量。 1234567891011121314151617181920212223242526// global shared datastd::mutex m; // #include &lt;mutex&gt;std::condition_variable cv; // #include &lt;condition_variable&gt;bool flag = false;thread1() &#123; flag = false; Type* value = new Type(/* parameters */); thread2(value); std::unique_lock&lt;std::mutex&gt; lk(m); cv.wait(lk, []()&#123; return flag; &#125;); apply(value); lk.unlock(); thread2.join(); if (nullptr != value) &#123; delete value; &#125; return;&#125;thread2(Type* value) &#123; std::lock_guard&lt;std::mutex&gt; lk(m); // do some evaluations value-&gt;update(/* parameters */); flag = true; cv.notify_one(); return;&#125; 这样一来，由线程之间的同步由互斥量和条件变量来保证，同时也避免了 while (true) 死循环空耗 CPU 的情况。","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"ihey.xyz//source/tags/面试/"},{"name":"转载","slug":"转载","permalink":"ihey.xyz//source/tags/转载/"},{"name":"c&cpp","slug":"c-cpp","permalink":"ihey.xyz//source/tags/c-cpp/"}]},{"title":"为什么没有虚构造函数","slug":"为什么没有虚构造函数","date":"2019-04-04T11:28:21.302Z","updated":"2019-04-20T17:14:09.704Z","comments":true,"path":"2019/04/04/为什么没有虚构造函数/","link":"","permalink":"ihey.xyz/2019/04/04/为什么没有虚构造函数/","excerpt":"","text":"1 构造一个对象的时候，必须知道对象的实际类型，而虚函数行为是在运行期间确定实际类型的。而在构造一个对象时，由于对象还未构造成功。编译器无法知道对象的实际类型，是该类本身，还是该类的一个派生类，或是更深层次的派生类。无法确定。。。 2 虚函数的执行依赖于虚函数表。而虚函数表在构造函数中进行初始化工作，即初始化vptr，让他指向正确的虚函数表。而在构造对象期间，虚函数表还没有被初始化，将无法进行。 更多的情况： \\1. 从存储空间角度，虚函数对应一个指向vtable虚函数表的指针，这大家都知道，可是这个指向vtable的指针其实是存储在对象的内存空间的。问题出来了，如果构造函数是虚的，就需要通过 vtable来调用，可是对象还没有实例化，也就是内存空间还没有，怎么找vtable呢？所以构造函数不能是虚函数。 \\2. 从使用角度，虚函数主要用于在信息不全的情况下，能使重载的函数得到对应的调用。构造函数本身就是要初始化实例，那使用虚函数也没有实际意义呀。所以构造函数没有必要是虚函数。虚函数的作用在于通过父类的指针或者引用来调用它的时候能够变成调用子类的那个成员函数。而构造函数是在创建对象时自动调用的，不可能通过父类的指针或者引用去调用，因此也就规定构造函数不能是虚函数。 \\3. 构造函数不需要是虚函数，也不允许是虚函数，因为创建一个对象时我们总是要明确指定对象的类型，尽管我们可能通过实验室的基类的指针或引用去访问它但析构却不一定，我们往往通过基类的指针来销毁对象。这时候如果析构函数不是虚函数，就不能正确识别对象类型从而不能正确调用析构函数。 \\4. 从实现上看，vbtl在构造函数调用后才建立，因而构造函数不可能成为虚函数从实际含义上看，在调用构造函数时还不能确定对象的真实类型（因为子类会调父类的构造函数）；而且构造函数的作用是提供初始化，在对象生命期只执行一次，不是对象的动态行为，也没有必要成为虚函数。 \\5. 当一个构造函数被调用时，它做的首要的事情之一是初始化它的VPTR。因此，它只能知道它是“当前”类的，而完全忽视这个对象后面是否还有继承者。当编译器为这个构造函数产生代码时，它是为这个类的构造函数产生代码——既不是为基类，也不是为它的派生类（因为类不知道谁继承它）。所以它使用的VPTR必须是对于这个类的VTABLE。而且，只要它是最后的构造函数调用，那么在这个对象的生命期内，VPTR将保持被初始化为指向这个VTABLE, 但如果接着还有一个更晚派生的构造函数被调用，这个构造函数又将设置VPTR指向它的 VTABLE，等.直到最后的构造函数结束。VPTR的状态是由被最后调用的构造函数确定的。这就是为什么构造函数调用是从基类到更加派生类顺序的另一个理由。但是，当这一系列构造函数调用正发生时，每个构造函数都已经设置VPTR指向它自己的VTABLE。如果函数调用使用虚机制，它将只产生通过它自己的VTABLE的调用，而不是最后的VTABLE（所有构造函数被调用后才会有最后的VTABLE）。","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"ihey.xyz//source/tags/面试/"},{"name":"转载","slug":"转载","permalink":"ihey.xyz//source/tags/转载/"},{"name":"c&cpp","slug":"c-cpp","permalink":"ihey.xyz//source/tags/c-cpp/"}]},{"title":"深拷贝和浅拷贝","slug":"深拷贝和浅拷贝","date":"2019-04-04T11:08:53.397Z","updated":"2019-04-20T17:14:07.290Z","comments":true,"path":"2019/04/04/深拷贝和浅拷贝/","link":"","permalink":"ihey.xyz/2019/04/04/深拷贝和浅拷贝/","excerpt":"","text":"介绍 两个区别 在未定义显示拷贝构造函数的情况下，系统会调用默认的拷贝函数——即浅拷贝，它能够完成成员的一一复制。当数据成员中没有指针时，浅拷贝是可行的；但当数据成员中有指针时，如果采用简单的浅拷贝，则两类中的两个指针将指向同一个地址，当对象快结束时，会调用两次析构函数，而导致指针悬挂现象，所以，此时，必须采用深拷贝。 深拷贝与浅拷贝的区别就在于深拷贝会在堆内存中另外申请空间来储存数据，从而也就解决了指针悬挂的问题。简而言之，当数据成员中有指针时，必须要用深拷贝。 带实例的解释c++默认的拷贝构造函数是浅拷贝。浅拷贝就是对象的数据成员之间的简单赋值，如你设计了一个没有类而没有提供它的复制构造函数，当用该类的一个对象去给令一个对象赋值时所执行的过程就是浅拷贝，如： 123456789101112class A &#123; public: A(int _data) : data(_data)&#123;&#125; A()&#123;&#125; private: int data; &#125;;int main() &#123; A a(5), b = a; // 仅仅是数据成员之间的赋值 &#125; 这一句b = a;就是浅拷贝，执行完这句后b.data = 5;如果对象中没有其他的资源（如：堆，文件，系统资源等），则深拷贝和浅拷贝没有什么区别，但当对象中有这些资源时，例子： 1234567891011121314151617181920class A &#123; public: A(int _size) : size(_size) &#123; data = new int[size]; &#125; // 假如其中有一段动态分配的内存 A()&#123;&#125;; ~A() &#123; delete [] data; &#125; // 析构时释放资源 private: int* data; int size; &#125;int main() &#123; A a(5), b = a; // 注意这一句 &#125; 这里的b = a会造成未定义行为，因为类A中的复制构造函数是编译器生成的，所以b = a执行的是一个浅拷贝过程。浅拷贝是对象数据之间的简单赋值，比如：b.size = a.size;b.data = a.data; // Oops!这里b的指针data和a的指针指向了堆上的同一块内存，a和b析构时，b先把其data指向的动态分配的内存释放了一次，而后a析构时又将这块已经被释放过的内存再释放一次。对同一块动态内存执行2次以上释放的结果是未定义的，所以这将导致内存泄露或程序崩溃。所以这里就需要深拷贝来解决这个问题，深拷贝指的就是当拷贝对象中有对其他资源（如堆、文件、系统等）的引用时（引用可以是指针或引用）时，对象的另开辟一块新的资源，而不再对拷贝对象中有对其他资源的引用的指针或引用进行单纯的赋值。如： 123456789101112131415161718192021222324class A &#123; public: A(int _size) : size(_size) &#123; data = new int[size]; &#125; // 假如其中有一段动态分配的内存 A()&#123;&#125;; A(const A&amp; _A) : size(_A.size) &#123; data = new int[size]; &#125; // 深拷贝 ~A() &#123; delete [] data; &#125; // 析构时释放资源 private: int* data; int size; &#125;int main() &#123; A a(5), b = a; // 这次就没问题了 &#125; 总结深拷贝和浅拷贝的区别是在对象状态中包含其它对象的引用的时候，当拷贝一个对象时，如果需要拷贝这个对象引用的对象，则是深拷贝，否则是浅拷贝。","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"ihey.xyz//source/tags/面试/"},{"name":"转载","slug":"转载","permalink":"ihey.xyz//source/tags/转载/"},{"name":"c&cpp","slug":"c-cpp","permalink":"ihey.xyz//source/tags/c-cpp/"}]},{"title":"源文件到可执行文件的过程","slug":"源文件到可执行文件的过程","date":"2019-03-26T05:26:44.215Z","updated":"2019-04-20T17:14:10.386Z","comments":true,"path":"2019/03/26/源文件到可执行文件的过程/","link":"","permalink":"ihey.xyz/2019/03/26/源文件到可执行文件的过程/","excerpt":"","text":"源文件到可执行文件的过程一. 四个步骤 预处理，.c文件经过预处理器产生.ii文件 编译，产生汇编文件(.s文件) 汇编，产生目标文件(.o或.obj或.a文件) 链接，产生可执行文件(.out或.exe文件) 二. 预处理 对所有的”#define”进行宏展开； 处理所有的条件编译指令，比如”#if”, “#ifdef”, “#elif”, “#endif” 处理“#include”指令，这个过程是递归的，也就是说被包含的文件可能还包含其他文件 删除所有的注释“//”和“/\\/”** 添加行号和文件标识 保留所有的“#pragma”编译器指令 经过预处理后的.ii文件不包含任何宏定义，因为所有的宏已经被展开，并且包含的文件也已经被插入到.ii文件中。 三. 编译编译的过程就是将预处理完的文件进行一系列词法分析，语法分析，语义分析及优化后生成相应的汇编代码文件(.s文件) ··· 经过预编译得到的输出文件中，只有常量；如数字、字符串、变量的定义，以及C语言的关键字，如main,if,else,for,while,{,}, +,-,*,/等等。 编译程序所要作得工作就是通过词法分析和语法分析，在确认所有的指令都符合语法规则之后，将其翻译成等价的中间代码表示或汇编代码。 优化处理是编译系统中一项比较艰深的技术。它涉及到的问题不仅同编译技术本身有关，而且同机器的硬件环境也有很大的关系。优化一部分是对中间代码的优化。这种优化不依赖于具体的计算机。另一种优化则主要针对目标代码的生成而进行的。 对于前一种优化，主要的工作是删除公共表达式、循环优化（代码外提、强度削弱、变换循环控制条件、已知量的合并等）、复写传播，以及无用赋值的删除，等等。 后一种类型的优化同机器的硬件结构密切相关，最主要的是考虑是如何充分利用机器的各个硬件寄存器存放的有关变量的值，以减少对于内存的访问次数。另外，如何根据机器硬件执行指令的特点（如流水线、RISC、CISC、VLIW等）而对指令进行一些调整使目标代码比较短，执行的效率比较高，也是一个重要的研究课题。 经过优化得到的汇编代码必须经过汇编程序的汇编转换成相应的机器指令，方可能被机器执行。 四. 汇编 汇编器是将汇编代码转变成机器可以执行的代码，每一个汇编语句几乎都对应一条机器指令。最终产生目标文件(.o或.obj文件)。 ··· 汇编过程实际上指把汇编语言代码翻译成目标机器指令的过程。对于被翻译系统处理的每一个C语言源程序，都将最终经过这一处理而得到相应的目标文件。目标文件中所存放的也就是与源程序等效的目标的机器语言代码。 目标文件由段组成。通常一个目标文件中至少有两个段： 代码段：该段中所包含的主要是程序的指令。该段一般是可读和可执行的，但一般却不可写。 数据段：主要存放程序中要用到的各种全局变量或静态的数据。一般数据段都是可读，可写，可执行的。 Win32平台上一般生成.obj文件，其拥有PE（Portable Executable，即Windows可执行文件）文件格式，包含的是二进制代码，但是不一定能执行。当编译器将一个工程里的所有.cpp文件以分离的方式编译完毕后，再由链接器进行链接成为一个.exe或.dll文件。 五. 链接链接的过程主要包括了地址和空间分配(Address and Storage Allocation)、符号决议(Symbol Resolution)和重定位(Relocation) ··· 由汇编程序生成的目标文件并不能立即就被执行，其中可能还有许多没有解决的问题。 例如，某个源文件中的函数可能引用了另一个源文件中定义的某个符号（如变量或者函数调用等）；在程序中可能调用了某个库文件中的函数，等等。所有的这些问题，都需要经链接程序的处理方能得以解决。 链接程序的主要工作就是将有关的目标文件彼此相连接，也即将在一个文件中引用的符号同该符号在另外一个文件中的定义连接起来，使得所有的这些目标文件成为一个能够诶操作系统装入执行的统一整体。 根据开发人员指定的同库函数的链接方式的不同，链接处理可分为两种： （1）静态链接 在这种链接方式下，函数的代码将从其所在地静态链接库中被拷贝到最终的可执行程序中。这样该程序在被执行时这些代码将被装入到该进程的虚拟地址空间中。静态链接库实际上是一个目标文件的集合，其中的每个文件含有库中的一个或者一组相关函数的代码。 （2）动态链接 在此种方式下，函数的代码被放到称作是动态链接库或共享对象的某个目标文件中。链接程序此时所作的只是在最终的可执行程序中记录下共享对象的名字以及其它少量的登记信息。在此可执行文件被执行时，动态链接库的全部内容将被映射到运行时相应进程的虚地址空间。动态链接程序将根据可执行程序中记录的信息找到相应的函数代码。 对于可执行文件中的函数调用，可分别采用动态链接或静态链接的方法。使用动态链接能够使最终的可执行文件比较短小，并且当共享对象被多个进程使用时能节约一些内存，因为在内存中只需要保存一份此共享对象的代码。但并不是使用动态链接就一定比使用静态链接要优越。在某些情况下动态链接可能带来一些性能上损害。","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"ihey.xyz//source/tags/面试/"},{"name":"转载","slug":"转载","permalink":"ihey.xyz//source/tags/转载/"},{"name":"c&cpp","slug":"c-cpp","permalink":"ihey.xyz//source/tags/c-cpp/"}]},{"title":"reference和point的区别","slug":"reference和pointer的区别","date":"2019-03-23T10:06:59.064Z","updated":"2019-04-20T17:14:10.989Z","comments":true,"path":"2019/03/23/reference和pointer的区别/","link":"","permalink":"ihey.xyz/2019/03/23/reference和pointer的区别/","excerpt":"","text":"1. reference和pointer的区别在C++ 中，reference在很多方面与指针(pointer)具有同样的能力。 More Effective C++ 一书的总结：它们两者之间的最大区别是引用必须指向某个对象而 指针可以是NULL，此外引用一旦指定不能更改而指针可以。 这两个区别点导致引用有更加安全和高效的特性，但是指针却有无可比拟的灵活性。大部分人出于安全性的考虑会推荐使用引用，这其实也是它设计的主要目的，但是如果你想要灵活的设计，大部分时候你只能选用指针，比如设计模式种的大部分设计都是使用指针而不是使 用引用。引用在参数传递的时候用得多一些，而类内部的组合中可能会使用指针来提高设计 的灵活性（毕竟一旦设定就无法改变对于灵活性来说是个灾难）。 异常安全指针还存在的另一个优势是可以使用它实现 pimpl，这种手法可以达到很好的异常安全 性。引用在交换的时候实际上交换的是引用的内容，所以无法做到这一点。详见《More Exceptional C++》一书的第22条。 网上观点的总结 尽量避免使用指针，可以用引用的时候尽量不要使用指针。 指针参数可以在调用的时候传递 NULL 而引用则不可以。所以如果你的参数是可选的话 选择传递指针。 指针参数在调用的时候会比引用要明显一些： 12int fun(val);int fuc(&amp;val); 前者比较难以看出是传递引用还是直接传递值，而第二个很明显是传递指针。 如果你需要在函数中重新绑定改变参数，你只能用指针。因为你没有办法重新绑定一个引用。不过需要这么做的情况好像比较少。 如果你的参数需要传递数组的话，你只能使用指针。 其他情况下尽可能的使用引用。因为引用从语义上来说更直白一些，也更不容易出错。 引用一定是指向一个合法的对象，而指针需要在使用之前检查是否为 NULL 还有一些人觉得参数的传递如果是传递引用的话只使用 const refercence，把引用的作用限制在避免参数拷贝的开销上。然后把改变变量内容的任务交给指针。这也是一个非常不错的建议。 pointer必须使用一个星号操作符 * 来去掉reference在定义operator++()时，如果使用pointer，定义为*operator++(day *d)```，则调用的时候必须使用```++&x```来调用，这看起来很奇怪。所以在写operator++的时候，唯一的办法就是passing by reference。123456789101112131415161718192021#### References vs. const pointersC++ 中不允许定义”const reference”， 因为一个reference天生就是const。也就是说，一旦将一个reference绑定到一个对象，就无法再将它重新绑定到另一个不同的对象。在声明一个reference之后没有写法可以将它重新绑定到另外一个对象。一个常量指针的声明也同样必须带有一个初始化赋值，不能够对reference二次绑定作为reference与pointer的不同。并不比常量指针和非常量指针的不同更为显著。#### Null references一个有效的reference必须指向一个对象；而一个指针不需要。一个指针，即使是一个常量指针， 都可以有空值。 一个空指针不指向任何东西。这点不同就暗示当你想要确信一个参数必须指向一个对象的时候，应该使用reference作为参数类型。 例如，交换函数(swap function)。#### 更安全？有些人认为既然reference不能够为空，那么它应该比指针更安全。 我认为reference可能要安全一点，但不会安全很多。虽然一个有效的reference不能为空，但是无效的可以呀。实际上，在很多情况下程序有可能产生无效的reference，而不只是空的reference，例如，你可以定义一个reference，使它绑定到一个指针指向的对象，如下所示：```c++int *p;…int &amp;r = *p; 如果指针*p在reference定义时刚好为空，则这个reference为空。 从技术上来说，这个错误并不在于将reference绑定到一个空值，而是在于对一个空指针去参考。 对一个空指针去参考产生了一个不确定的操作，也就意味着很多事都可能发生，而且大部分都不是什么好事。很有可能当程序将reference r 绑定到*p (p所指向的对象)的时候，p实际上没有被去参考，甚至程序只是将p的值拷贝给实现r的指针。而程序将会继续执行下去直到错误在后面的运行中更为明显的表 现出来，产生不可预知的危害。 下面的函数展示了另外一种产生无效reference的方法： 123456int &amp;f()&#123; int i; … return i;&#125; 这个函数返回一个指向本地变量 i 的reference。然而当函数返回时，本地变量 i 的存储空间也就消失了。因此这个函数实际返回了一个指向被回收了的空间的reference。这个操作与返回一个指向本地变量的指针的后果相同。有些编译 器可以在编译时发现这个错误，但也很有可能不会发现。 我喜欢reference，也有很好的理由使用它们代替pointer。但如果你期望使用reference来使你的程序健壮性显著增强，那么你多半会失望的。","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"ihey.xyz//source/tags/面试/"},{"name":"转载","slug":"转载","permalink":"ihey.xyz//source/tags/转载/"},{"name":"c&cpp","slug":"c-cpp","permalink":"ihey.xyz//source/tags/c-cpp/"}]}]}